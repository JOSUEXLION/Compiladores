import ply.yacc as yacc #Importamos de la libreria ply la function yacc
import os #Interactúa con el sistema operativo
import codecs #codificadores y decodificadores
import re #Importamos el modulo re 
from analizadorlexico.py import tokens #Del analizador léxico importamos los 
from sys import stdin 

#Se define que tokens por orden de prioridad
precedence = (
    ('right' , 'ASSIGN'), #Operador de asignación
    ('right' , 'UPDATE'), #Operador de actualización 
    ('left' ,  'NE'),
    ('left' ,  'LT' , 'LTE' , 'GT', 'GTE'),
    ('left' , 'PLUS' , 'MINUS'),  #Suma y resta 
    ('left' ,'TIMES' , 'DIVIDE'), #Multiplicacion y division
    ('right' , 'ODD'), #Sirve para ver si una expresión es impar 
    ('left' , 'LPARENT' , 'RPARENT'),
)
 
#Definimos funciones 
#Lista de producciones (p)
#Regla gramatical lenguaje PL/0
#Definimos nodos

def   p_program(p):
        '''program  =  block'''
         print “program”
        #p[0]  =  program(p[1], “programa”)

def  p_constDecl(p):
  '''constDecl = C ONST constAssignmentList ;'''
    #p[0]  = constDecl(p[2])
    print “constDecl”
 
def p_constDeclEmpty(p): #No produce nada (vacio)
'''constDecl = empty'''
    #p[0] = Null()
    print “nulo”

def  constAssignmentList(p):
'''ID = NUMBER'''
   print “constAssignmentList ID = NUMBER”

def  constAssignmentList(p):
  '''constAssignmentList ID = NUMBER'''
   print “constAssignmentList”

def  identList1(p):
'''identList : ID'''
  Print “identList 1”

def  identList2(p):
'''identList : ID'''
  Print “identList 1”

def  procDecl1(p):
 '''proDecl : procDecl PROCEDURE ID ; block ;'''
  print “procDecl 1”

def  procDeclEmpty(p):
 '''proDecl : empty'''
  print “nulo”

def  statement1(p):
'''statement: ID UPDATE expression'''
  print “statement 1”

def  statement2(p):
  '''statement: CALL ID'''
  print “statement 2”

def  statement3(p):
'''statement: BEGIN statementList END'''
  print “statement 3”

def  statement4(p):
 '''statement: IF condition THEN statement'''
  print “statement 4”

def  statement5(p):
'''statement: WHILE condition DO statement'''
  print “statement 5”

def  p_statementEmpty(p):
 '''statement: empty'''
  print “nulo”

def  p_statementList1(p):
  '''statementList: statementList ; statement'''
  print “statementList 2”

def  p_condition1(p):
'''condition : ODD expression'''
  print “condition 1”

def  p_condition2(p):
 '''condition : expression relation expression'''
  print “condition 2”

def  p_relation1(p):
'''relation : ASSIGN'''
  print “relation 1”


def  p_relation2(p):
  '''relation : NE'''
  print “relation 2”

def  p_relation3(p):
  '''relation : LT'''
  print “relation 3”

def  p_relation4(p):
'''relation : GT'''
  print “relation 4”

def  p_relation5(p):
 '''relation : LTE'''
  print “relation 5”

def  p_relation6(p):
 '''relation : GTE'''
  print “relation 6”

def  p_expression1(p):
'''expression : term'''
  print “expression 1”

def  p_expression2(p):
 '''expression : addingOperator term'''
  print “expression 2”

def  p_expression3(p):
 '''expression : expression addingOperator term'''
  print “expression 3”


def  p_term1(p):
 '''term : term multiplyingOperator factor'''
  print “term 1”

def  p_multiplyingOperator1(p):
  '''multiplyingOperator : TIMES'''
  print “multiplyingOperator 1”

def  p_multiplyingOperator2(p):
  '''multiplyingOperator : DIVIDE'''
  print “multiplyingOperator 2”

def p_factor1(p):
  '''factor : ID'''
  print “fator 1”

def p_factor2(p):
  '''factor : NUMBER'''
  print “fator 2”

def p_factor3(p):
'''factor : LPARENT expression RPARENT'''
  print “fator 3”

def p_empty(p):
 '''empty : '''
  pass

def p_error(p):
  print “ërror de sintaxis”,p #Imprime si hay algun error de sintaxis
  print “error en la linea”+str(p.lineno) # Lineno, nos permite saber en que línea se produce un error
  
#Declaramos funcion que recorre los ficheros
 def buscarFicheros(directorio):
  
def buscarFicheros(directorio):
	ficheros = []
	numArchivo = ''
	respuesta = False
	cont = 1

	for base, dirs, files in os.walk(directorio):
		ficheros.append(files)

	for file in files:
		print str(cont)+". "+file
		cont = cont+1

	while respuesta == False:
		numArchivo = raw_input('\nNumero del test ')
		for file in files:
			if file == files[int(numArchivo)-1]:
				respuesta = True
				break
	print "Has escogido \"%s\" \n" %files[int(numArchivo)-1]


	return files[int(numArchivo)-1]
	
	directorio = '/home/user/Desktop/lex-analizador/test'
archivo = buscarFicheros(directorio))#contiene el nombre del archivo
test = directorio+archivo #Contiene el directorio más el nombre del archivo
fb = codecs.open(test,"r","utf-8") #Nos permite abrir el archive aunque contenga tildes o Ñ
cadena =fb.read() #Contiene el código fuente del archivo
fb.close() #Cierra el archivo


#Se crea el parser que nos permite manejar el yacc
#Yacc le permite al programa hacer el análisis sintáctico.
parser  =  yacc.yacc()
result   =  parser.parse(cadena)

print result

 

