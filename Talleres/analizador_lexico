import ply.lex as lex #importamos la librearia ply como lex
import re # expresiones regulares
import codecs #codificadores y decodificadores
import os #Interactúa con el sistema operativo
import sys #	Interactúa con el sistema de Python

#una lista
#definimos diccionaro de los tokens
tokens = reservadas+['ID','NUMBER','PLUS','MINUS','TIMES','DIVIDE', 
		'ODD','ASSIGN','NE','LT','LTE','GT','GTE',
		'LPARENT','RPARENT','COMMA','SEMMICOLOM',
		',DOT','UPDATE'
]
#cadena de caracteres de palabras reservadas
reservadas = ['BEGIN','END','IF','THEN','WHILE','DO','CONST','CALL',
'VAR','PROCEDURE','OUT','IN','ELSE'
]
#reservadas = { #diccionario de las palabras reservadas
#	'begin':'BEGIN',
#	'end':'END',
#	'if':'IF',
#	'then':'THEN',
#	'while':'WHILE',
#	'do':'DO',
#	'call':'CALL',
#	'const':'CONST',
#	'int':'INT',
#	'procedure':'PROCEDURE',
#	'out':'OUT',
#	'in':'IN',
#	'else':'ELSE',
# }
#definimos los tokens
tokens = tokens+list(reservadas.values()) #

t_ignore = '\t'
t_PLUS = r'\+'
t_MINUS = r'\-'
t_TIMES = r'\*'
t_DIVIDE = r'/'
t_ODD = r'ODD'
t_ASSING = r'='
t_NE = r'<>'
t_LT = r'<'
t_LTE = r'<='
t_GT = r'>'
t_GTE = r'>='
t_LPARENT = r'\('
t_RPARENT = r'\)'
t_COMMA = r','h b-
t_SEMMICOLOM = r';'
t_DOT = r'\.'
t_UPDATE = r':=' 

def t_ID(t):  #funcion del token
	r'[a-zA-Z_][A-Za-z0-9_]*' #expresion regular este identificador reconocera cualquier letra, guin bajo,numeros y de cero o muchas veces
	if t.value.upper() in reservadas: #condicion para convertir la
		t.value = t.value.upper() #el valor del token es igual a el mismo y lo convierta en letra capital myus
		t.type = t.value # y que guarde el tipo del tokens y el valor 

		return t #reconocerr el identificador y retornamos al tokens para print
def t_newline(t): #funcion de los 
	r'\n+'
	t.lexer.lineno += len(t.value)

def t_COMMENT(t): #funcion de los comentarios 
	r'\#.*' #nueva expresion regular para reconocer el proceso de los comentarios
	pass    #reconocera la funcion pero no la va print

def t_NUMBER(t): #reconocera cualquier numero 
	r'\d+' # 
	t.value = int(t.value)
	return t

def t_error(t):
	print "caracter no valido '%s'" % t.valu[0]
	t.lexer.skip(1)

def buscarFicheros(directorio):
	ficheros = []
	numArchivo = ''
	respuesta = False
	cont = 1

	for base, dirs, files in os.walk(directorio):
		ficheros.append(files)

	for file in files:
		print str(cont)+". "+file
		cont = cont+1

	while respuesta == False:
		numArchivo = raw_input('\nNumero del test ')
		for file in files:
			if file == files[int(numArchivo)-1]:
				respuesta = True
				break
	print "Has escogido \"%s\" \n" %files[int(numArchivo)-1]


	return files[int(numArchivo)-1]

directorio = '/home/user/Desktop/lex-analizador/test'
archivo = buscarFicheros(directorio)
test = directorio+archivo
fb = codecs.open(test,"r","utf-8")
cadena =fb.read()
fb.close()

analizador = lex.lex()

analizador.input(cadena)

while True:
	tok =analizador.token()
	if not tok : break
	print tok
